#!/usr/bin/env python3

# Noblit -- An immutable append-only database
# Copyright 2020 Ruud van Asseldonk

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# A copy of the License has been included in the root of the repository.

from __future__ import annotations

"""
Build automation for Noblit.

Noblit consists of many parts. In particular the Rust crate, but also the client
libraries, golden tests, docs, and various supporting scripts. Fully running all
quality checks involves many steps. CI runs all of them, but to individually run
all of them locally is tedious. This script automates that.

This script is not a build system: it runs a dumb sequence of commands, it does
not track dependencies, nor does it avoid running unnecessary steps. This makes
it easier to write (no need to specify dependencies), but slower to run (it may
do useless work).

This script will by default build the Nix development environment and enter it,
if it is not already on the PATH. This can take a second or so, even when it is
a no-op. For lower latency, enter the environment once with "nix run --command
$SHELL", and start ./build inside that shell.

Flags:

  -h --help          Show this text.
     --no-isolation  Run in the existing environment, avoid Nix.
"""

import os
import re
import subprocess
import sys
import time

from typing import Dict, List, NamedTuple, Optional


class Result(NamedTuple):
    command: List[str]
    duration_seconds: float
    exit_code: int


class Step(NamedTuple):
    commands: List[List[str]]
    cwd: Optional[str] = None

    @staticmethod
    def new(*commands: List[str], cwd: Optional[str] = None) -> Step:
        return Step(commands, cwd)

    def run(self) -> Iterable[Result]:
        for cmd in self.commands:
            # TODO: Locate repo root.
            if self.cwd is not None:
                cwd = f'{os.getcwd()}/{self.cwd}'
            else:
                cwd = os.getcwd()

            print('\n$', ' '.join(cmd))
            begin_second = time.monotonic()
            completed_proc = subprocess.run(cmd, cwd=cwd)
            end_second = time.monotonic()
            yield Result(
                command=cmd,
                duration_seconds=end_second - begin_second,
                exit_code=completed_proc.returncode,
            )

build_defs = """

build_lib:
  cargo build
  cargo test

build_client_haskell:
  cd client/haskell
  stack --no-terminal build
  stack --no-terminal test

build_example_haskell:
  cd examples
  stack --no-terminal build

typecheck:
  -- Typecheck Python code.
  mypy --strict client/python
  mypy --strict golden
  mypy --strict libnoblit
  mypy --strict build

build_header:
  -- Generate the C header, then compile it to a precompiled header with GCC.
  -- This acts as a basic sanity check on the documentation.
  libnoblit/gen_header.py --output noblit.h
  gcc -Wall -Werror -c noblit.h

check_symbols:
  -- Check that all exported symbols are documented, and that all documented
  -- symbols are exported.
  libnoblit/check_symbols.py target/debug/libnoblit.so

check_goldens:
  prove --exec golden/run.py golden

build_docs:
  -- Build the documentation. This checks for dead links etc.
  mkdocs build

build_miri:
  -- Run the Rust test suite under Miri to detect certain classes of undefined
  -- behavior. TODO: Also run the binaries and golden tests under Miri. There
  -- are two blockers for this:
  -- * Miri does not support selecting a binary (https://github.com/rust-lang/miri/issues/739)
  -- * Noblit assumes that Vec<u8> is 8-byte aligned. This assumption has so far
  --   not been violated in practice, but in theory the assumption is invalid.
  cd noblit
  cargo +nightly-2020-01-18 clean
  cargo +nightly-2020-01-18 miri test
  cargo +nightly-2020-01-18 clean
"""

STEPS = {
    'build_lib': Step.new(
        ['cargo', 'build'],
        ['cargo', 'test'],
    ),
    'build_client_haskell': Step.new(
        ['stack', '--no-terminal', 'build'],
        ['stack', '--no-terminal', 'test'],
        cwd='client/haskell',
    ),
    'build_example_haskell': Step.new(
        ['stack', '--no-terminal', 'build'],
        cwd='examples',
    ),
    'typecheck': Step.new(
        ['mypy', '--strict', 'client/python'],
        ['mypy', '--strict', 'golden'],
        ['mypy', '--strict', 'libnoblit'],
    ),
    'build_header': Step.new(
        ['libnoblit/gen_header.py', '--output', 'noblit.h'],
        ['gcc', '-Wall', '-Werror', '-c', 'noblit.h'],
    ),
    'check_symbols': Step.new(
        ['libnoblit/check_symbols.py', 'target/debug/libnoblit.so'],
    ),
    'check_goldens': Step.new(
        ['prove', '--exec', 'golden/run.py', 'golden'],
    ),
    'build_docs': Step.new(
        ['mkdocs', 'build'],
    ),
    'build_lib_miri': Step.new(
        ['cargo', '+nightly-2020-01-18', 'clean'],
        ['cargo', '+nightly-2020-01-18', 'miri', 'test'],
        ['cargo', '+nightly-2020-01-18', 'clean'],
        cwd='noblit',
    ),
}


def get_devenv_path() -> str:
    """
    If a Nix development environment is on the PATH, return it. Otherwise invoke
    Nix to build the development environment, and return its path.
    """
    match = re.search(r'/nix/store/[0-9a-z]{32}-noblit-devenv', os.environ['PATH'])

    if match is not None:
        return match.group(0)

    else:
        cmd = ['nix-build', '--no-out-link']
        return subprocess.run(cmd, capture_output=True).stdout.decode('utf-8').strip()


def get_dev_environment() -> Dict[str, str]:
    """
    Set up the PATH and other environment variables to make the tools from the
    Nix development environment available, and nothing else.
    """
    devenv = get_devenv_path()
    return {
        'LANG': 'en_US.UTF8',
        # Binaries in the profile built above may need locales, that they can't
        # find unless we point LOCALE_ARCHIVE at the archive that contains them.
        'LIBRARY_PATH': f'{devenv}/lib',
        'LOCALE_ARCHIVE': f'{devenv}/lib/locale/locale-archive',
        # Prevent another reexec by setting NOBLIT_DEVENV.
        'NOBLIT_DEVENV': '1',
        'PATH': f'{devenv}/bin',
        'HOME': os.environ['HOME'],
        'TERM': os.environ['TERM'],
    }


def main() -> None:
    if '--help' in sys.argv or '-h' in sys.argv:
        print(__doc__.strip())
        sys.exit(0)

    # Run the steps provided on the command line, or all steps if none were
    # provided.
    steps = [arg for arg in sys.argv[1:] if not arg.startswith('--')] or STEPS.keys()

    results = []

    for step_name in steps:
        step = STEPS[step_name]
        results.extend(step.run())

    print()
    for result in results:
        cmd = ' '.join(result.command)
        if result.exit_code == 0:
            status = '\x1b[32m PASS\x1b[0m'
        else:
            status = '\x1b[31m FAIL\x1b[0m'

        print(f'{status}  {result.duration_seconds:3.1f}s  {cmd}')

    sys.exit(max(result.exit_code for result in results))


if __name__ == '__main__':
    if os.getenv('NOBLIT_DEVENV') == '1':
        main()
    elif '--no-isolation' in sys.argv:
        sys.argv.remove('--no-isolation')
        main()
    else:
        new_environment = get_dev_environment()
        os.execve(sys.argv[0], sys.argv, new_environment)
