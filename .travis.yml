# Don't spam me please, I'll check Travis manually.
notifications:
  email: false

language: nix

cache:
  directories:
  - $HOME/.cache/miri
  - $HOME/.cargo
  - $HOME/.rustup
  - $HOME/.stack
  - $TRAVIS_BUILD_DIR/client/haskell/.stack-work
  - $TRAVIS_BUILD_DIR/examples/.stack-work

before_cache:
  # Building Miri produces files in the "incremental" directory. Even if
  # everything was still cached and the build is a no-op, it writes new,
  # different files. That triggers Travis to upload the full cache, which takes
  # a long time. Delete these files, they are not useful.
  - rm -fr $HOME/.cache/miri/target/debug/incremental

  # The Stack database also changes even no code changes, do not cache it either.
  - rm $HOME/.stack/stack.sqlite3

before_install:
  # Bring all the tools from the pinned build environment into the PATH.
  - export PATH=$(nix-build --no-out-link)/bin:$PATH

install:
  # Trigger Rustup to download and install the pinned Rust toolchain, but only
  # the minimum required (no docs).
  - rustup set profile minimal
  - cargo --version

  # Also download and install a pinned nightly, with the Miri MIR interpreter.
  - rustup +nightly-2020-01-18 component add miri
  - cargo  +nightly-2020-01-18 miri setup

  # Set up the Haskell toolchain.
  - cd $TRAVIS_BUILD_DIR/client/haskell
  - stack setup

script:
  # Build Noblit itself, and associated binaries, and run unit tests.
  - cargo build
  - cargo test

  # Build and test the Haskell client library.
  - cd $TRAVIS_BUILD_DIR/client/haskell
  - stack --no-terminal build
  - stack --no-terminal test
  - cd $TRAVIS_BUILD_DIR

  # Build the Haskell example.
  - cd $TRAVIS_BUILD_DIR/examples
  - stack --no-terminal build
  - cd $TRAVIS_BUILD_DIR

  # Typecheck the Python code.
  - mypy --strict client/python
  - mypy --strict golden
  - mypy --strict libnoblit

  # Generate the C header, then compile it to a precompiled header with GCC.
  # This acts as a basic sanity check on the documentation.
  - libnoblit/gen_header.py > noblit.h
  - gcc noblit.h

  # Check the goldens.
  - prove --exec golden/run.py golden

  # Build the documentation. This checks for dead links etc.
  - mkdocs build

  # Run the Rust test suite under Miri to detect certain classes of undefined
  # behavior. TODO: Also run the binaries and golden tests under Miri. There are
  # two blockers for this:
  # * Miri does not support selecting a binary (https://github.com/rust-lang/miri/issues/739)
  # * Noblit assumes that Vec<u8> is 8-byte aligned. This assumption has so far
  #   not been violated in practice, but in theory the assumption is invalid.
  - cd $TRAVIS_BUILD_DIR/noblit
  - cargo +nightly-2020-01-18 clean
  - cargo +nightly-2020-01-18 miri test
  - cargo +nightly-2020-01-18 clean
